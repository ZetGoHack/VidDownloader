#meta developer: @Last_Mimi & @ZetGo

import yt_dlp
import shutil
import os
import re
import unicodedata
import asyncio
import tempfile  
import time
from functools import partial
from urllib.parse import urlparse, parse_qs
from .. import loader, utils
from telethon.tl.types import DocumentAttributeAudio, MessageMediaDocument, DocumentAttributeVideo


class vidDownloaderMod(loader.Module):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""

    strings = {"name": "vidDownloader"}

    async def musiccmd(self, message):
        """ [—Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ/–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏]. –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª."""
        urls = []
        if message.is_reply:
            reply_msg = await message.get_reply_message()
            urls = self.extract_urls(reply_msg.raw_text)
        if not urls:
            args = message.raw_text.split(maxsplit=1)
            if len(args) > 1:
                urls = self.extract_urls(args[1])
        if not urls:
            await message.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É")
            return

        for url in urls:
            await self.process_video(url, message)

    async def videocmd(self, message):
        """ [–≤–∏–¥–µ–æ—Ñ–∞–π–ª/–æ—Ç–≤–µ—Ç]. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ"""
        if message.is_reply:
            reply_msg = await message.get_reply_message()
            if reply_msg and isinstance(reply_msg.media, MessageMediaDocument):
                await self.process_attached_video(reply_msg, message)
                return
        if isinstance(message.media, MessageMediaDocument):
            await self.process_attached_video(message, message)
        else:
            await message.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ.")

    async def getvidcmd(self, message):
        """ [–æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞]. –í—ã–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
        url = [] #–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞, –Ω–æ –ø–æ—Å—Ç–∞–≤–ª—é —Å—á—ë—Ç—á–∏–∫ —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å –µ—Å–ª–∏ —á—Ç–æ "–ø–∞–∂–∞–ª—Å—Ç–∞"
        self.don = False
        self.message = message
        args = message.raw_text.split(maxsplit=1)
        if len(args) > 1:
            url = self.extract_urls(args[1])
        if len(url) > 1:
            await message.respond("–ù–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
            return
        if not url:
            await message.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ")
            return
        url = url[0]
        self.url = url
        tempM = await message.respond("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
        txt, self.titl, e = self.getInfo(url)
        if not txt:
            await tempM.edit(f"‚ùé –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ, –æ—à–∏–±–∫–∞: {e}")
            return
        await tempM.edit("‚òëÔ∏è –ì–æ—Ç–æ–≤–æ! –°—Ç—Ä–æ—é –º–µ–Ω—é...")
        await self.Menu(txt, message, tempM)
        
        
    def getInfo(self, u):
        """–£–∑–Ω–∞—é –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–∞—Ç—ã–≤–µ–º–æ–º –≤–∏–¥–µ–æ"""
        ydl_opts = {
            'no_warnings': True,
        }
        e = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(u, download=False)
                title = info_dict.get('title', 'unknown_title')
                channel = info_dict.get('channel', '–û—à–∏–±–∫–∞')
                formats = info_dict.get("formats", [])
            settext = []
            collected = []
            for frmt in formats:
                if frmt.get('ext') == 'mp4' and frmt.get('format_note') and frmt.get('audio_codec') in [None,'none'] and frmt['format_note'] not in collected and frmt.get('format_note') not in ('Default','Premium'):
                    collected.append(frmt['format_note'])
                    settext.append( {'format_id' : frmt['format_id'], 'format_note' : frmt['format_note']})
                
            return settext, title, e
        except Exception as e:
            print(e)
            return None, None, e
        
    async def Menu(self, ids, message, toDelete):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
        text = f"‚ñ∂Ô∏è –í–∏–¥–µ–æ: '{self.titl}'.\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç: mp4."
        frmts_btn = []
        self.key = []
        for id in ids:
            frmts_btn.append({"text": id['format_note'], "callback": partial(self.handle_callback, f"format:{id['format_id']}f:{id['format_note']}")})
        self.key.append(frmts_btn)
        await self.inline.form(
            text=text, 
            message=message,
            reply_markup=self.key
        )
        await toDelete.delete()
        

    async def downl_choosn(self, inlmessage):
        """–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ"""
        temp_dir = tempfile.mkdtemp()
        filename_base = self.extract_filename_from_url(self.url)
        fmt = f"{self.chsn}+bestaudio"
        ydl_opts = {
            'format': fmt,
            'outtmpl': os.path.join(temp_dir, f'{filename_base}.%(ext)s'),
            'no_warnings': True,
        }
        try:
            await inlmessage.edit(text="‚åõ")
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(self.url, download=True)
                ext = info_dict.get('ext', 'webm')
                filename = os.path.join(temp_dir, f"{filename_base}.{ext}")
                duration = info_dict.get('duration', 0)
                resolution = info_dict.get('resolution', '0x0')
                
                
            width, height = map(int, resolution.split('x'))
            
            if os.path.exists(filename):
                await inlmessage.edit(text="‚òëÔ∏è –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ, –∂–¥–∏ –≤—ã–≥—Ä—É–∑–∫–∏!")
                try:
                    await self.client.send_message(
                    utils.get_chat_id(self.message),
                    file=filename, force_document=False,
                     attributes=[
                         DocumentAttributeVideo(duration=duration, h=height, w=width)],
                     )
                    await self.clean_directory(filename)
                except Exception as e:
                    await self.message.respond(str(e))
                    await self.clean_directory(filename)
            else:
                await call.delete()
        except Exception as e:
            await message.respond(f"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –æ—à–∏–±–∫–∞: {e}")
        
        
    async def handle_callback(self, call, gotten):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏(–ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–∞—é)"""
        #await self.message.respond(f"–ü–æ–ª—É—á–µ–Ω–æ: {call} –∏ {gotten}")
        frmt = call.split("format:")[1].split("f:")[0]
        humanfrmt = call.split("f:")[1]
        self.chsn = frmt
        text = f"<emoji document_id=5334681713316479679>üì±</emoji> –í–∏–¥–µ–æ: '{self.titl}'.\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç: mp4.\n\n<emoji document_id=5264971795647184318>üêá</emoji> –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ: {humanfrmt}"
        downbtn = [{"text": "–°–∫–∞—á–∞—Ç—å", "callback": self.downl_choosn}]
        if not self.don:
            self.key.append(downbtn)
            self.don = True
        await gotten.edit(text=text,reply_markup=self.key)
    
    def extract_urls(self, text):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏"""
        if not text:
            return []
        urls = re.split(r'[;, \n]+', text.strip())
        return [url.strip() for url in urls if url.strip()]

    def clean_youtube_url(self, url):
        """–ù–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —é—Ç—É–±"""
        parsed_url = urlparse(url)
        if "youtube" in parsed_url.netloc or "youtu.be" in parsed_url.netloc:
            return url  
        return None

    def extract_filename_from_url(self, url):
        """–ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –≤–∏–¥–µ–æ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        parsed_url = urlparse(url)
        if parsed_url.query:
            query_params = parse_qs(parsed_url.query)
            return query_params.get('v', ['unknown'])[0]
        else:
            return os.path.basename(parsed_url.path)

    async def process_video(self, url, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ"""
        clean_url = self.clean_youtube_url(url)
        if not clean_url:
            return
        status_message = await message.respond(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–∫–∏: {clean_url}\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚åõ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [ ] –û—Ç–ø—Ä–∞–≤–∫–∞: [ ]")
        start_time = time.time()
        file_info = await self.download_video(clean_url)
        if file_info:
            end_time = time.time()
            down_time = end_time - start_time
            await status_message.edit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚åõ] –û—Ç–ø—Ä–∞–≤–∫–∞: [ ]\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥")
            start_time = time.time()
            file_path, duration, title, channel = await self.convert_to_mp3(file_info, status_message)
            
            if file_path:
                file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                end_time = time.time()
                ffmpeg_time = end_time - start_time
                await status_message.edit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚úÖ] –û—Ç–ø—Ä–∞–≤–∫–∞: [‚åõ]\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É]: {ffmpeg_time:.2f} —Å–µ–∫—É–Ω–¥")
                start_time = time.time()
                await message.client.send_file(
                    message.chat_id,
                    file_path,
                    attributes=[DocumentAttributeAudio(duration=duration, title=title,performer=channel)],
                )
                os.remove(file_path)
                end_time = time.time()
                send_time = end_time - start_time
                me = await self._client.get_me()
                user_id = me.id
                await status_message.edit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚úÖ] –û—Ç–ø—Ä–∞–≤–∫–∞: [‚úÖ]\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É]: {ffmpeg_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ—Ç–ø—Ä–∞–≤–∫—É]: {send_time:.2f} —Å–µ–∫—É–Ω–¥")
                #await self._client.send_message(user_id,f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚úÖ] –û—Ç–ø—Ä–∞–≤–∫–∞: [‚úÖ]\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É]: {ffmpeg_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ—Ç–ø—Ä–∞–≤–∫—É]: {send_time:.2f} —Å–µ–∫—É–Ω–¥")
                await self.clean_directory(os.path.dirname(file_path), status_message)
            else:
                await status_message.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {clean_url}")
        else:
            await status_message.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {clean_url}")

    async def download_video(self, url):
        """–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å YouTube"""
        temp_dir = tempfile.mkdtemp()
        filename_base = self.extract_filename_from_url(url)
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': os.path.join(temp_dir, f'{filename_base}.%(ext)s'),
            'no_warnings': True,
        }
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(url, download=True)
                title = info_dict.get('title', 'unknown_title')
                ext = info_dict.get('ext', 'webm')
                filename = os.path.join(temp_dir, f"{filename_base}.{ext}")
                duration = info_dict.get('duration', 0)
                channel = info_dict.get('channel', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            if os.path.exists(filename):
                return filename, duration, title, channel
            else:
                return None
        except Exception as e:
            print(e)
            return None

    async def convert_to_mp3(self, file_info, status_message):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –≤ MP3"""
        #ffmpeg_location = "/usr/bin/ffmpeg"
        ffmpeg_location = shutil.which("ffmpeg")
        if not ffmpeg_location:
            raise FileNotFoundError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
        video_file, duration, title, channel = file_info
        output_mp3_path = video_file.replace(os.path.splitext(video_file)[1], ".mp3")
        ffmpeg_command = f'{ffmpeg_location} -i "{video_file}" -vn -ar 44100 -ac 2 -b:a 192k "{output_mp3_path}"'
        
        process = await asyncio.create_subprocess_shell(
            ffmpeg_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0 and os.path.exists(output_mp3_path):
            os.remove(video_file)
            return output_mp3_path, duration, title, channel
        else:
            await status_message.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ MP3. –ö–æ–¥ –æ—à–∏–±–∫–∏: {process.returncode}")
            return None


    async def process_attached_video(self, video_message, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ"""
        status_message = await message.respond("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ\n–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚åõ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [ ] –û—Ç–ø—Ä–∞–≤–∫–∞: [ ]")
        
        start_time = time.time()
        file_info = await self.download_and_convert_video_to_mp3(video_message, status_message, start_time)
        if file_info:
            

            file_path, duration, title, down_time, ff_time = file_info
            file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
            start_time = time.time()
            await message.client.send_file(
                message.chat_id,
                file_path,
                attributes=[DocumentAttributeAudio(duration=duration, title=title or "VidToMusic @last_mimi")],
            )
            end_time = time.time()
            send_time = end_time - start_time
            me = await self._client.get_me()
            user_id = me.id
            await self._client.send_message(user_id,f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚úÖ] –û—Ç–ø—Ä–∞–≤–∫–∞: [‚úÖ]\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É]: {ff_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ—Ç–ø—Ä–∞–≤–∫—É]: {send_time:.2f} —Å–µ–∫—É–Ω–¥")

            os.remove(file_path)
            await self.clean_directory(os.path.dirname(file_path), status_message, '.mp3')
        else:
            await status_message.edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

    async def download_and_convert_video_to_mp3(self, video_message, status_message, start_time):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ MP3"""
        temp_dir = tempfile.mkdtemp()
        
        try:
            passed = False
            video_file = await video_message.download_media(file=temp_dir)
            if not video_file:
                await status_message.edit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
                return None
            end_time = time.time()
            down_time = end_time - start_time
            await status_message.edit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚åõ] –û—Ç–ø—Ä–∞–≤–∫–∞: [ ]\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            
            start_time = time.time()
            ffmpeg_location = shutil.which("ffmpeg")
            if not ffmpeg_location:
                raise FileNotFoundError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
            output_mp3_path = video_file.replace(os.path.splitext(video_file)[1], ".mp3")
            ffmpeg_command = f'{ffmpeg_location} -i "{video_file}" -vn -ar 44100 -ac 2 -b:a 192k "{output_mp3_path}"'
            
            process = await asyncio.create_subprocess_shell(
                ffmpeg_command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            passed = f"{output_mp3_path}"
            file_size_mb = os.path.getsize(output_mp3_path) / (1024 * 1024)
            
            end_time = time.time()
            ff_time = end_time - start_time
            await status_message.edit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: [‚úÖ] –û–±—Ä–∞–±–æ—Ç–∫–∞: [‚úÖ] –û—Ç–ø—Ä–∞–≤–∫–∞: [‚åõ]\n–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} –ú–ë\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ]: {down_time:.2f} —Å–µ–∫—É–Ω–¥\n–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏[–ù–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É]: {ff_time:.2f} —Å–µ–∫—É–Ω–¥")

            if process.returncode == 0 and os.path.exists(output_mp3_path):
                os.remove(video_file)
                duration = 0
                title = "YouTubeDownloader"
                return output_mp3_path, duration, title, down_time, ff_time
            else:
                await status_message.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ MP3. –ö–æ–¥ –æ—à–∏–±–∫–∏: {process.returncode}")
                return None
        except Exception as e:
            await status_message.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}. {passed}")
            await self.clean_directory(temp_dir, status_message)
            return None
    async def clean_directory(self, dir_path, mess=None, extension=None):
        """–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã"""
        if mess:
            await mess.delete()
        if os.path.isfile(dir_path):
            dir_path = os.path.dirname(dir_path)
        if os.path.exists(dir_path):
            shutil.rmtree(dir_path)
